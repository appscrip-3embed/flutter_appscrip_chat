// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../src/models/user_details_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 329637739332878047),
      name: 'UserDetails',
      lastPropertyId: const IdUid(10, 1014758314160979593),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3009339161038328451),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1440068674444945399),
            name: 'userProfileImageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6546597352794176566),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2577159085026227871),
            name: 'userIdentifier',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6137773689204814724),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2103344748528992400),
            name: 'online',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7087438037388668312),
            name: 'lastSeen',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8159965897712592127),
            name: 'visibility',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4046799925007796277),
            name: 'notification',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1014758314160979593),
            name: 'language',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 329637739332878047),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserDetails: EntityDefinition<UserDetails>(
        model: _entities[0],
        toOneRelations: (UserDetails object) => [],
        toManyRelations: (UserDetails object) => {},
        getId: (UserDetails object) => object.id,
        setId: (UserDetails object, int id) {
          object.id = id;
        },
        objectToFB: (UserDetails object, fb.Builder fbb) {
          final userProfileImageUrlOffset =
              fbb.writeString(object.userProfileImageUrl);
          final userNameOffset = fbb.writeString(object.userName);
          final userIdentifierOffset = fbb.writeString(object.userIdentifier);
          final userIdOffset = fbb.writeString(object.userId);
          final languageOffset = object.language == null
              ? null
              : fbb.writeString(object.language!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userProfileImageUrlOffset);
          fbb.addOffset(2, userNameOffset);
          fbb.addOffset(3, userIdentifierOffset);
          fbb.addOffset(4, userIdOffset);
          fbb.addBool(5, object.online);
          fbb.addInt64(6, object.lastSeen);
          fbb.addBool(7, object.visibility);
          fbb.addBool(8, object.notification);
          fbb.addOffset(9, languageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserDetails(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userProfileImageUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              userName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              userIdentifier: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              online: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              lastSeen:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              visibility: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              notification:
                  const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20),
              language: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserDetails] entity fields to define ObjectBox queries.
class UserDetails_ {
  /// see [UserDetails.id]
  static final id =
      QueryIntegerProperty<UserDetails>(_entities[0].properties[0]);

  /// see [UserDetails.userProfileImageUrl]
  static final userProfileImageUrl =
      QueryStringProperty<UserDetails>(_entities[0].properties[1]);

  /// see [UserDetails.userName]
  static final userName =
      QueryStringProperty<UserDetails>(_entities[0].properties[2]);

  /// see [UserDetails.userIdentifier]
  static final userIdentifier =
      QueryStringProperty<UserDetails>(_entities[0].properties[3]);

  /// see [UserDetails.userId]
  static final userId =
      QueryStringProperty<UserDetails>(_entities[0].properties[4]);

  /// see [UserDetails.online]
  static final online =
      QueryBooleanProperty<UserDetails>(_entities[0].properties[5]);

  /// see [UserDetails.lastSeen]
  static final lastSeen =
      QueryIntegerProperty<UserDetails>(_entities[0].properties[6]);

  /// see [UserDetails.visibility]
  static final visibility =
      QueryBooleanProperty<UserDetails>(_entities[0].properties[7]);

  /// see [UserDetails.notification]
  static final notification =
      QueryBooleanProperty<UserDetails>(_entities[0].properties[8]);

  /// see [UserDetails.language]
  static final language =
      QueryStringProperty<UserDetails>(_entities[0].properties[9]);
}
