// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../src/models/attachment_model.dart';
import '../../../src/models/conversation_config_model.dart';
import '../../../src/models/db_models/db_conversation_model.dart';
import '../../../src/models/db_models/forward_message_model.dart';
import '../../../src/models/db_models/pending_message_model.dart';
import '../../../src/models/last_message_details.dart';
import '../../../src/models/meta_data_model.dart';
import '../../../src/models/user_details_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 329637739332878047),
      name: 'UserDetails',
      lastPropertyId: const IdUid(14, 6061968472417448061),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3009339161038328451),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1440068674444945399),
            name: 'userProfileImageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6546597352794176566),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2577159085026227871),
            name: 'userIdentifier',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6137773689204814724),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2103344748528992400),
            name: 'online',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7087438037388668312),
            name: 'lastSeen',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8159965897712592127),
            name: 'visibility',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4046799925007796277),
            name: 'notification',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1014758314160979593),
            name: 'language',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2743344435005786162),
            name: 'timestamp',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1753398602888573948),
            name: 'memberName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4261162591408815349),
            name: 'isAdmin',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6061968472417448061),
            name: 'dbMetadata',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 938566555159714543),
      name: 'AttachmentModel',
      lastPropertyId: const IdUid(10, 1970843341494592246),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8848338521945783210),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7692651483650785627),
            name: 'thumbnailUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5720930682286019277),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8605137451555092264),
            name: 'mimeType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1849709319992727255),
            name: 'mediaUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4513031995725928561),
            name: 'mediaId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4651715439986019909),
            name: 'extension',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8387080186469562418),
            name: 'size',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1647565619402597063),
            name: 'attachmentIndex',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2138670439029160943),
      name: 'ConversationConfigModel',
      lastPropertyId: const IdUid(4, 4670413944913812396),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1932937733277214060),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8640354074677636606),
            name: 'typingEvents',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9140035252138541505),
            name: 'readEvents',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4670413944913812396),
            name: 'pushNotifications',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 3624908745119452764),
      name: 'ForwardMessageModel',
      lastPropertyId: const IdUid(3, 4573305329282577500),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1738285225417548326),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1533044048543119567),
            name: 'conversationId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4573305329282577500),
            name: 'messages',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 3601465766739318501),
      name: 'LastMessageDetails',
      lastPropertyId: const IdUid(9, 6602821607281721590),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8691628819685195983),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1158207147385544543),
            name: 'showInConversation',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7421656422808759179),
            name: 'sentAt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7192502489464200023),
            name: 'senderName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3173809097688960969),
            name: 'messageType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6612570512676209427),
            name: 'messageId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5653748845204839093),
            name: 'conversationId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8981372878008052135),
            name: 'body',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6602821607281721590),
            name: 'dbCustomType',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 3097049695561435300),
      name: 'PendingMessageModel',
      lastPropertyId: const IdUid(3, 1359213924737852583),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1640404966680140110),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2175284523873352332),
            name: 'conversationId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1359213924737852583),
            name: 'messages',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 3144208863203176583),
      name: 'DBConversationModel',
      lastPropertyId: const IdUid(13, 4372738786490480885),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1897557699052577609),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6362630287204851109),
            name: 'unreadMessagesCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 821998317431135316),
            name: 'opponentDetailsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 6471990731423969932),
            relationTarget: 'UserDetails'),
        ModelProperty(
            id: const IdUid(4, 2315920148215526451),
            name: 'messagingDisabled',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4615851621041259632),
            name: 'membersCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4846432776748678520),
            name: 'lastMessageSentAt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5457207972232733296),
            name: 'lastMessageDetailsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 7028592394213605641),
            relationTarget: 'LastMessageDetails'),
        ModelProperty(
            id: const IdUid(8, 3334473984167523196),
            name: 'isGroup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1025198528314510299),
            name: 'conversationTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2868455376553941525),
            name: 'conversationImageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2816259203537029286),
            name: 'conversationId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8941436306636774281),
            name: 'configId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 1447646506459867452),
            relationTarget: 'ConversationConfigModel'),
        ModelProperty(
            id: const IdUid(13, 4372738786490480885),
            name: 'messages',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 8664243317588607612),
      name: 'IsmChatMetaData',
      lastPropertyId: const IdUid(16, 77958083771070236),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3374373376569866957),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5369295778381695751),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6002872576949986936),
            name: 'parentMessageBody',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3680930453925048231),
            name: 'locationAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6769271318630129437),
            name: 'profilePic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3911463888133500617),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6143536100039888705),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3656712956607567510),
            name: 'parentMessageInitiator',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6261111293735506307),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3007068599043538964),
            name: 'isMatchId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7869323669965352379),
            name: 'isGuestMatch',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6374214950216858848),
            name: 'guestMatchInitiatedByUserId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 331404997144763682),
            name: 'guestMatchInitiatedWithUserId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1878956539628848870),
            name: 'genderOfUserWhoStartedGuestChat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2949582644680301162),
            name: 'genderOfUserWhoReceivedTheGuestChat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 77958083771070236),
            name: 'paidChat',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(11, 8664243317588607612),
      lastIndexId: const IdUid(6, 2668303341873990124),
      lastRelationId: const IdUid(3, 405050114779946002),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        3536957095278829762,
        8525152327066185984,
        6695352261664866221
      ],
      retiredIndexUids: const [2668303341873990124, 5203398003565205133],
      retiredPropertyUids: const [
        6135562772538696060,
        8741614695739538530,
        6571231154626712087,
        7700009115349782480,
        4127584087436438662,
        2766651485068408221,
        5420682778032237828,
        2553422342139287984,
        3942797834898307886,
        551213619175399988,
        4973386042178775422,
        3738775923100552610,
        7643543588663330291,
        7859021326812023723,
        2959409859621550685,
        4993593895935372084,
        8480826612125282291,
        3466993199991864040,
        643151627896226444,
        5753960246820257219,
        6872390744162861094,
        6451592245597751455,
        6415187126002907569,
        7073102954851671040,
        7172830418094854325,
        7506691914790751355,
        197037678496626960,
        2411845745202330981,
        4713977054813298769,
        1134576386521141392,
        5522549662831334955,
        2344306538709525935,
        3307942624675734363,
        6914588496572903368,
        2974634866523618237,
        762126665140612619,
        7937997236260019356,
        329739945565553963,
        1970843341494592246,
        8518104636076171627,
        8480101500964110809,
        2885910552683566222,
        7688739134591815653,
        8175152848824486701,
        7589219670391452730,
        5244593007786017178,
        4292339350363903924,
        5341478439808300329,
        4596157184350928383,
        4317776396279683234,
        3869402466833893640,
        4703465573552064618,
        32733709291852383,
        6388414582076498476
      ],
      retiredRelationUids: const [
        405050114779946002,
        6469044073861604259,
        8703662965513109892
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserDetails: EntityDefinition<UserDetails>(
        model: _entities[0],
        toOneRelations: (UserDetails object) => [],
        toManyRelations: (UserDetails object) => {},
        getId: (UserDetails object) => object.id,
        setId: (UserDetails object, int id) {
          object.id = id;
        },
        objectToFB: (UserDetails object, fb.Builder fbb) {
          final userProfileImageUrlOffset =
              fbb.writeString(object.userProfileImageUrl);
          final userNameOffset = fbb.writeString(object.userName);
          final userIdentifierOffset = fbb.writeString(object.userIdentifier);
          final userIdOffset = fbb.writeString(object.userId);
          final languageOffset = object.language == null
              ? null
              : fbb.writeString(object.language!);
          final memberNameOffset = object.memberName == null
              ? null
              : fbb.writeString(object.memberName!);
          final dbMetadataOffset = fbb.writeString(object.dbMetadata);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userProfileImageUrlOffset);
          fbb.addOffset(2, userNameOffset);
          fbb.addOffset(3, userIdentifierOffset);
          fbb.addOffset(4, userIdOffset);
          fbb.addBool(5, object.online);
          fbb.addInt64(6, object.lastSeen);
          fbb.addBool(7, object.visibility);
          fbb.addBool(8, object.notification);
          fbb.addOffset(9, languageOffset);
          fbb.addInt64(10, object.timestamp);
          fbb.addOffset(11, memberNameOffset);
          fbb.addBool(12, object.isAdmin);
          fbb.addOffset(13, dbMetadataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserDetails(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userProfileImageUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              userName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              userIdentifier: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              online: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              lastSeen:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              visibility: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              notification:
                  const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20),
              language: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              timestamp: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24),
              memberName: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              isAdmin: const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false))
            ..dbMetadata = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, '');

          return object;
        }),
    AttachmentModel: EntityDefinition<AttachmentModel>(
        model: _entities[1],
        toOneRelations: (AttachmentModel object) => [],
        toManyRelations: (AttachmentModel object) => {},
        getId: (AttachmentModel object) => object.id,
        setId: (AttachmentModel object, int id) {
          object.id = id;
        },
        objectToFB: (AttachmentModel object, fb.Builder fbb) {
          final thumbnailUrlOffset = object.thumbnailUrl == null
              ? null
              : fbb.writeString(object.thumbnailUrl!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final mimeTypeOffset = object.mimeType == null
              ? null
              : fbb.writeString(object.mimeType!);
          final mediaUrlOffset = object.mediaUrl == null
              ? null
              : fbb.writeString(object.mediaUrl!);
          final mediaIdOffset =
              object.mediaId == null ? null : fbb.writeString(object.mediaId!);
          final extensionOffset = object.extension == null
              ? null
              : fbb.writeString(object.extension!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, thumbnailUrlOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, mimeTypeOffset);
          fbb.addOffset(4, mediaUrlOffset);
          fbb.addOffset(5, mediaIdOffset);
          fbb.addOffset(6, extensionOffset);
          fbb.addFloat64(7, object.size);
          fbb.addInt64(8, object.attachmentIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AttachmentModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              thumbnailUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              size: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              mimeType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              mediaUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              mediaId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              extension: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..attachmentIndex = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 20);

          return object;
        }),
    ConversationConfigModel: EntityDefinition<ConversationConfigModel>(
        model: _entities[2],
        toOneRelations: (ConversationConfigModel object) => [],
        toManyRelations: (ConversationConfigModel object) => {},
        getId: (ConversationConfigModel object) => object.id,
        setId: (ConversationConfigModel object, int id) {
          object.id = id;
        },
        objectToFB: (ConversationConfigModel object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.typingEvents);
          fbb.addBool(2, object.readEvents);
          fbb.addBool(3, object.pushNotifications);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ConversationConfigModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              typingEvents:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false),
              readEvents:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              pushNotifications: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false));

          return object;
        }),
    ForwardMessageModel: EntityDefinition<ForwardMessageModel>(
        model: _entities[3],
        toOneRelations: (ForwardMessageModel object) => [],
        toManyRelations: (ForwardMessageModel object) => {},
        getId: (ForwardMessageModel object) => object.id,
        setId: (ForwardMessageModel object, int id) {
          object.id = id;
        },
        objectToFB: (ForwardMessageModel object, fb.Builder fbb) {
          final conversationIdOffset = fbb.writeString(object.conversationId);
          final messagesOffset = fbb.writeList(
              object.messages.map(fbb.writeString).toList(growable: false));
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, conversationIdOffset);
          fbb.addOffset(2, messagesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ForwardMessageModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              conversationId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              messages: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []));

          return object;
        }),
    LastMessageDetails: EntityDefinition<LastMessageDetails>(
        model: _entities[4],
        toOneRelations: (LastMessageDetails object) => [],
        toManyRelations: (LastMessageDetails object) => {},
        getId: (LastMessageDetails object) => object.id,
        setId: (LastMessageDetails object, int id) {
          object.id = id;
        },
        objectToFB: (LastMessageDetails object, fb.Builder fbb) {
          final senderNameOffset = fbb.writeString(object.senderName);
          final messageIdOffset = fbb.writeString(object.messageId);
          final conversationIdOffset = fbb.writeString(object.conversationId);
          final bodyOffset = fbb.writeString(object.body);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.showInConversation);
          fbb.addInt64(2, object.sentAt);
          fbb.addOffset(3, senderNameOffset);
          fbb.addInt64(4, object.messageType);
          fbb.addOffset(5, messageIdOffset);
          fbb.addOffset(6, conversationIdOffset);
          fbb.addOffset(7, bodyOffset);
          fbb.addInt64(8, object.dbCustomType);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LastMessageDetails(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              showInConversation:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false),
              sentAt:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              senderName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              messageType:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              messageId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              conversationId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              body: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''))
            ..dbCustomType = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 20);

          return object;
        }),
    PendingMessageModel: EntityDefinition<PendingMessageModel>(
        model: _entities[5],
        toOneRelations: (PendingMessageModel object) => [],
        toManyRelations: (PendingMessageModel object) => {},
        getId: (PendingMessageModel object) => object.id,
        setId: (PendingMessageModel object, int id) {
          object.id = id;
        },
        objectToFB: (PendingMessageModel object, fb.Builder fbb) {
          final conversationIdOffset = fbb.writeString(object.conversationId);
          final messagesOffset = fbb.writeList(
              object.messages.map(fbb.writeString).toList(growable: false));
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, conversationIdOffset);
          fbb.addOffset(2, messagesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PendingMessageModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              conversationId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              messages: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []));

          return object;
        }),
    DBConversationModel: EntityDefinition<DBConversationModel>(
        model: _entities[6],
        toOneRelations: (DBConversationModel object) =>
            [object.opponentDetails, object.lastMessageDetails, object.config],
        toManyRelations: (DBConversationModel object) => {},
        getId: (DBConversationModel object) => object.id,
        setId: (DBConversationModel object, int id) {
          object.id = id;
        },
        objectToFB: (DBConversationModel object, fb.Builder fbb) {
          final conversationTitleOffset = object.conversationTitle == null
              ? null
              : fbb.writeString(object.conversationTitle!);
          final conversationImageUrlOffset = object.conversationImageUrl == null
              ? null
              : fbb.writeString(object.conversationImageUrl!);
          final conversationIdOffset = object.conversationId == null
              ? null
              : fbb.writeString(object.conversationId!);
          final messagesOffset = fbb.writeList(
              object.messages.map(fbb.writeString).toList(growable: false));
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.unreadMessagesCount);
          fbb.addInt64(2, object.opponentDetails.targetId);
          fbb.addBool(3, object.messagingDisabled);
          fbb.addInt64(4, object.membersCount);
          fbb.addInt64(5, object.lastMessageSentAt);
          fbb.addInt64(6, object.lastMessageDetails.targetId);
          fbb.addBool(7, object.isGroup);
          fbb.addOffset(8, conversationTitleOffset);
          fbb.addOffset(9, conversationImageUrlOffset);
          fbb.addOffset(10, conversationIdOffset);
          fbb.addInt64(11, object.config.targetId);
          fbb.addOffset(12, messagesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DBConversationModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              unreadMessagesCount: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6),
              messagingDisabled: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              lastMessageSentAt: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              membersCount: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              isGroup: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              conversationTitle: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              conversationImageUrl:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 22),
              conversationId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24),
              messages:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 28, []));
          object.opponentDetails.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.opponentDetails.attach(store);
          object.lastMessageDetails.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.lastMessageDetails.attach(store);
          object.config.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.config.attach(store);
          return object;
        }),
    IsmChatMetaData: EntityDefinition<IsmChatMetaData>(
        model: _entities[7],
        toOneRelations: (IsmChatMetaData object) => [],
        toManyRelations: (IsmChatMetaData object) => {},
        getId: (IsmChatMetaData object) => object.id,
        setId: (IsmChatMetaData object, int id) {
          object.id = id;
        },
        objectToFB: (IsmChatMetaData object, fb.Builder fbb) {
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final parentMessageBodyOffset = object.parentMessageBody == null
              ? null
              : fbb.writeString(object.parentMessageBody!);
          final locationAddressOffset = object.locationAddress == null
              ? null
              : fbb.writeString(object.locationAddress!);
          final profilePicOffset = object.profilePic == null
              ? null
              : fbb.writeString(object.profilePic!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final isMatchIdOffset = object.isMatchId == null
              ? null
              : fbb.writeString(object.isMatchId!);
          final guestMatchInitiatedByUserIdOffset =
              object.guestMatchInitiatedByUserId == null
                  ? null
                  : fbb.writeString(object.guestMatchInitiatedByUserId!);
          final guestMatchInitiatedWithUserIdOffset =
              object.guestMatchInitiatedWithUserId == null
                  ? null
                  : fbb.writeString(object.guestMatchInitiatedWithUserId!);
          final genderOfUserWhoStartedGuestChatOffset =
              object.genderOfUserWhoStartedGuestChat == null
                  ? null
                  : fbb.writeString(object.genderOfUserWhoStartedGuestChat!);
          final genderOfUserWhoReceivedTheGuestChatOffset =
              object.genderOfUserWhoReceivedTheGuestChat == null
                  ? null
                  : fbb
                      .writeString(object.genderOfUserWhoReceivedTheGuestChat!);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, countryOffset);
          fbb.addOffset(2, parentMessageBodyOffset);
          fbb.addOffset(3, locationAddressOffset);
          fbb.addOffset(4, profilePicOffset);
          fbb.addOffset(5, lastNameOffset);
          fbb.addOffset(6, firstNameOffset);
          fbb.addBool(7, object.parentMessageInitiator);
          fbb.addOffset(8, userIdOffset);
          fbb.addOffset(9, isMatchIdOffset);
          fbb.addBool(10, object.isGuestMatch);
          fbb.addOffset(11, guestMatchInitiatedByUserIdOffset);
          fbb.addOffset(12, guestMatchInitiatedWithUserIdOffset);
          fbb.addOffset(13, genderOfUserWhoStartedGuestChatOffset);
          fbb.addOffset(14, genderOfUserWhoReceivedTheGuestChatOffset);
          fbb.addBool(15, object.paidChat);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = IsmChatMetaData(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              parentMessageBody: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              locationAddress: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              profilePic: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              parentMessageInitiator: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              isMatchId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              userId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              genderOfUserWhoReceivedTheGuestChat: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              genderOfUserWhoStartedGuestChat: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              guestMatchInitiatedByUserId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              guestMatchInitiatedWithUserId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              isGuestMatch: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24),
              paidChat: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserDetails] entity fields to define ObjectBox queries.
class UserDetails_ {
  /// see [UserDetails.id]
  static final id =
      QueryIntegerProperty<UserDetails>(_entities[0].properties[0]);

  /// see [UserDetails.userProfileImageUrl]
  static final userProfileImageUrl =
      QueryStringProperty<UserDetails>(_entities[0].properties[1]);

  /// see [UserDetails.userName]
  static final userName =
      QueryStringProperty<UserDetails>(_entities[0].properties[2]);

  /// see [UserDetails.userIdentifier]
  static final userIdentifier =
      QueryStringProperty<UserDetails>(_entities[0].properties[3]);

  /// see [UserDetails.userId]
  static final userId =
      QueryStringProperty<UserDetails>(_entities[0].properties[4]);

  /// see [UserDetails.online]
  static final online =
      QueryBooleanProperty<UserDetails>(_entities[0].properties[5]);

  /// see [UserDetails.lastSeen]
  static final lastSeen =
      QueryIntegerProperty<UserDetails>(_entities[0].properties[6]);

  /// see [UserDetails.visibility]
  static final visibility =
      QueryBooleanProperty<UserDetails>(_entities[0].properties[7]);

  /// see [UserDetails.notification]
  static final notification =
      QueryBooleanProperty<UserDetails>(_entities[0].properties[8]);

  /// see [UserDetails.language]
  static final language =
      QueryStringProperty<UserDetails>(_entities[0].properties[9]);

  /// see [UserDetails.timestamp]
  static final timestamp =
      QueryIntegerProperty<UserDetails>(_entities[0].properties[10]);

  /// see [UserDetails.memberName]
  static final memberName =
      QueryStringProperty<UserDetails>(_entities[0].properties[11]);

  /// see [UserDetails.isAdmin]
  static final isAdmin =
      QueryBooleanProperty<UserDetails>(_entities[0].properties[12]);

  /// see [UserDetails.dbMetadata]
  static final dbMetadata =
      QueryStringProperty<UserDetails>(_entities[0].properties[13]);
}

/// [AttachmentModel] entity fields to define ObjectBox queries.
class AttachmentModel_ {
  /// see [AttachmentModel.id]
  static final id =
      QueryIntegerProperty<AttachmentModel>(_entities[1].properties[0]);

  /// see [AttachmentModel.thumbnailUrl]
  static final thumbnailUrl =
      QueryStringProperty<AttachmentModel>(_entities[1].properties[1]);

  /// see [AttachmentModel.name]
  static final name =
      QueryStringProperty<AttachmentModel>(_entities[1].properties[2]);

  /// see [AttachmentModel.mimeType]
  static final mimeType =
      QueryStringProperty<AttachmentModel>(_entities[1].properties[3]);

  /// see [AttachmentModel.mediaUrl]
  static final mediaUrl =
      QueryStringProperty<AttachmentModel>(_entities[1].properties[4]);

  /// see [AttachmentModel.mediaId]
  static final mediaId =
      QueryStringProperty<AttachmentModel>(_entities[1].properties[5]);

  /// see [AttachmentModel.extension]
  static final extension =
      QueryStringProperty<AttachmentModel>(_entities[1].properties[6]);

  /// see [AttachmentModel.size]
  static final size =
      QueryDoubleProperty<AttachmentModel>(_entities[1].properties[7]);

  /// see [AttachmentModel.attachmentIndex]
  static final attachmentIndex =
      QueryIntegerProperty<AttachmentModel>(_entities[1].properties[8]);
}

/// [ConversationConfigModel] entity fields to define ObjectBox queries.
class ConversationConfigModel_ {
  /// see [ConversationConfigModel.id]
  static final id =
      QueryIntegerProperty<ConversationConfigModel>(_entities[2].properties[0]);

  /// see [ConversationConfigModel.typingEvents]
  static final typingEvents =
      QueryBooleanProperty<ConversationConfigModel>(_entities[2].properties[1]);

  /// see [ConversationConfigModel.readEvents]
  static final readEvents =
      QueryBooleanProperty<ConversationConfigModel>(_entities[2].properties[2]);

  /// see [ConversationConfigModel.pushNotifications]
  static final pushNotifications =
      QueryBooleanProperty<ConversationConfigModel>(_entities[2].properties[3]);
}

/// [ForwardMessageModel] entity fields to define ObjectBox queries.
class ForwardMessageModel_ {
  /// see [ForwardMessageModel.id]
  static final id =
      QueryIntegerProperty<ForwardMessageModel>(_entities[3].properties[0]);

  /// see [ForwardMessageModel.conversationId]
  static final conversationId =
      QueryStringProperty<ForwardMessageModel>(_entities[3].properties[1]);

  /// see [ForwardMessageModel.messages]
  static final messages = QueryStringVectorProperty<ForwardMessageModel>(
      _entities[3].properties[2]);
}

/// [LastMessageDetails] entity fields to define ObjectBox queries.
class LastMessageDetails_ {
  /// see [LastMessageDetails.id]
  static final id =
      QueryIntegerProperty<LastMessageDetails>(_entities[4].properties[0]);

  /// see [LastMessageDetails.showInConversation]
  static final showInConversation =
      QueryBooleanProperty<LastMessageDetails>(_entities[4].properties[1]);

  /// see [LastMessageDetails.sentAt]
  static final sentAt =
      QueryIntegerProperty<LastMessageDetails>(_entities[4].properties[2]);

  /// see [LastMessageDetails.senderName]
  static final senderName =
      QueryStringProperty<LastMessageDetails>(_entities[4].properties[3]);

  /// see [LastMessageDetails.messageType]
  static final messageType =
      QueryIntegerProperty<LastMessageDetails>(_entities[4].properties[4]);

  /// see [LastMessageDetails.messageId]
  static final messageId =
      QueryStringProperty<LastMessageDetails>(_entities[4].properties[5]);

  /// see [LastMessageDetails.conversationId]
  static final conversationId =
      QueryStringProperty<LastMessageDetails>(_entities[4].properties[6]);

  /// see [LastMessageDetails.body]
  static final body =
      QueryStringProperty<LastMessageDetails>(_entities[4].properties[7]);

  /// see [LastMessageDetails.dbCustomType]
  static final dbCustomType =
      QueryIntegerProperty<LastMessageDetails>(_entities[4].properties[8]);
}

/// [PendingMessageModel] entity fields to define ObjectBox queries.
class PendingMessageModel_ {
  /// see [PendingMessageModel.id]
  static final id =
      QueryIntegerProperty<PendingMessageModel>(_entities[5].properties[0]);

  /// see [PendingMessageModel.conversationId]
  static final conversationId =
      QueryStringProperty<PendingMessageModel>(_entities[5].properties[1]);

  /// see [PendingMessageModel.messages]
  static final messages = QueryStringVectorProperty<PendingMessageModel>(
      _entities[5].properties[2]);
}

/// [DBConversationModel] entity fields to define ObjectBox queries.
class DBConversationModel_ {
  /// see [DBConversationModel.id]
  static final id =
      QueryIntegerProperty<DBConversationModel>(_entities[6].properties[0]);

  /// see [DBConversationModel.unreadMessagesCount]
  static final unreadMessagesCount =
      QueryIntegerProperty<DBConversationModel>(_entities[6].properties[1]);

  /// see [DBConversationModel.opponentDetails]
  static final opponentDetails =
      QueryRelationToOne<DBConversationModel, UserDetails>(
          _entities[6].properties[2]);

  /// see [DBConversationModel.messagingDisabled]
  static final messagingDisabled =
      QueryBooleanProperty<DBConversationModel>(_entities[6].properties[3]);

  /// see [DBConversationModel.membersCount]
  static final membersCount =
      QueryIntegerProperty<DBConversationModel>(_entities[6].properties[4]);

  /// see [DBConversationModel.lastMessageSentAt]
  static final lastMessageSentAt =
      QueryIntegerProperty<DBConversationModel>(_entities[6].properties[5]);

  /// see [DBConversationModel.lastMessageDetails]
  static final lastMessageDetails =
      QueryRelationToOne<DBConversationModel, LastMessageDetails>(
          _entities[6].properties[6]);

  /// see [DBConversationModel.isGroup]
  static final isGroup =
      QueryBooleanProperty<DBConversationModel>(_entities[6].properties[7]);

  /// see [DBConversationModel.conversationTitle]
  static final conversationTitle =
      QueryStringProperty<DBConversationModel>(_entities[6].properties[8]);

  /// see [DBConversationModel.conversationImageUrl]
  static final conversationImageUrl =
      QueryStringProperty<DBConversationModel>(_entities[6].properties[9]);

  /// see [DBConversationModel.conversationId]
  static final conversationId =
      QueryStringProperty<DBConversationModel>(_entities[6].properties[10]);

  /// see [DBConversationModel.config]
  static final config =
      QueryRelationToOne<DBConversationModel, ConversationConfigModel>(
          _entities[6].properties[11]);

  /// see [DBConversationModel.messages]
  static final messages = QueryStringVectorProperty<DBConversationModel>(
      _entities[6].properties[12]);
}

/// [IsmChatMetaData] entity fields to define ObjectBox queries.
class IsmChatMetaData_ {
  /// see [IsmChatMetaData.id]
  static final id =
      QueryIntegerProperty<IsmChatMetaData>(_entities[7].properties[0]);

  /// see [IsmChatMetaData.country]
  static final country =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[1]);

  /// see [IsmChatMetaData.parentMessageBody]
  static final parentMessageBody =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[2]);

  /// see [IsmChatMetaData.locationAddress]
  static final locationAddress =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[3]);

  /// see [IsmChatMetaData.profilePic]
  static final profilePic =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[4]);

  /// see [IsmChatMetaData.lastName]
  static final lastName =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[5]);

  /// see [IsmChatMetaData.firstName]
  static final firstName =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[6]);

  /// see [IsmChatMetaData.parentMessageInitiator]
  static final parentMessageInitiator =
      QueryBooleanProperty<IsmChatMetaData>(_entities[7].properties[7]);

  /// see [IsmChatMetaData.userId]
  static final userId =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[8]);

  /// see [IsmChatMetaData.isMatchId]
  static final isMatchId =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[9]);

  /// see [IsmChatMetaData.isGuestMatch]
  static final isGuestMatch =
      QueryBooleanProperty<IsmChatMetaData>(_entities[7].properties[10]);

  /// see [IsmChatMetaData.guestMatchInitiatedByUserId]
  static final guestMatchInitiatedByUserId =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[11]);

  /// see [IsmChatMetaData.guestMatchInitiatedWithUserId]
  static final guestMatchInitiatedWithUserId =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[12]);

  /// see [IsmChatMetaData.genderOfUserWhoStartedGuestChat]
  static final genderOfUserWhoStartedGuestChat =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[13]);

  /// see [IsmChatMetaData.genderOfUserWhoReceivedTheGuestChat]
  static final genderOfUserWhoReceivedTheGuestChat =
      QueryStringProperty<IsmChatMetaData>(_entities[7].properties[14]);

  /// see [IsmChatMetaData.paidChat]
  static final paidChat =
      QueryBooleanProperty<IsmChatMetaData>(_entities[7].properties[15]);
}
